{"version":3,"sources":["lib/CasparCGSocket.ts"],"names":[],"mappings":"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","file":"lib/CasparCGSocket.js","sourcesContent":["import * as net from \"net\";\r\nimport * as _ from \"highland\";\r\nimport {EventEmitter} from \"hap\";\r\nimport {IConnectionOptions, ConnectionOptions} from \"./AMCPConnectionOptions\";\r\nimport {AMCPUtil} from \"./AMCP\";\r\n// Command NS\r\nimport {Command as CommandNS} from \"./AbstractCommand\";\r\nimport IAMCPCommand = CommandNS.IAMCPCommand;\r\nimport IAMCPResponse = CommandNS.IAMCPResponse;\r\nimport AMCPResponse = CommandNS.AMCPResponse;\r\nimport IAMCPStatus = CommandNS.IAMCPStatus;\r\n// Event NS\r\nimport {CasparCGSocketStatusEvent, CasparCGSocketCommandEvent, CasparCGSocketResponseEvent} from \"./event/Events\";\r\n// Callback NSIAMCPResponse\r\nimport {Callback as CallbackNS} from \"./global/Callback\";\r\nimport IResponseCallback = CallbackNS.IResponseCallback;\r\n// Param NS \r\nimport {Param as ParamNS} from \"./ParamSignature\";\r\nimport Payload = ParamNS.Payload;\r\n\r\n/**\r\n * \r\n */\r\nexport interface ICasparCGSocket {\r\n\tconnected: boolean;\r\n\thost: string;\r\n\tport: number;\r\n\tsocketStatus: SocketState;\r\n\tconnect(): void;\r\n\tdisconnect(): void;\r\n\tdispose(): void;\r\n\tlog(args: any): void;\r\n\texecuteCommand(command: IAMCPCommand): IAMCPCommand;\r\n}\r\n\r\nexport enum SocketState {\r\n\t\tunconfigured\t= 0,\r\n\t\tconfigured\t\t= 1 << 0,\r\n\t\thostFound\t\t= 1 << 1,\t\t// @todo: implement\r\n\t\tconnectionAttempt = 1 << 2,\t\t// @todo: implement\r\n\t\tconnected\t\t= 1 << 3,\r\n\t\tdisconnected\t= 1\t<< 4,\r\n\t\tlostConnection\t= 1 << 5,\r\n\t\treconnecting\t= 1 << 6\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport class CasparCGSocket extends EventEmitter implements ICasparCGSocket {\r\n\tprivate _client: net.Socket;\r\n\r\n\tprivate _host: string;\r\n\tprivate _port: number;\r\n\tprivate _autoReconnect: boolean;\r\n\tprivate _reconnectDelay: number;\r\n\tprivate _reconnectAttempts: number;\r\n\tprivate _reconnectAttempt: number = 0;\r\n\tprivate _reconnectInterval: NodeJS.Timer;\r\n\tprivate _socketStatus: SocketState = SocketState.unconfigured;\r\n\r\n\tprivate _parsedResponse: AMCPUtil.CasparCGSocketResponse;\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic constructor(host: string, port: number, autoReconnect: boolean, autoReconnectInterval: number, autoReconnectAttempts: number) {\r\n\t\tsuper();\r\n\t\tthis._host = host;\r\n\t\tthis._port = port;\r\n\t\tthis._reconnectDelay = autoReconnectInterval;\r\n\t\tthis._autoReconnect = autoReconnect;\r\n\t\tthis._reconnectAttempts = autoReconnectAttempts;\r\n\t\tthis._client = new net.Socket();\r\n\t\tthis._client.on(\"lookup\", () => this._onLookup());\r\n\t\tthis._client.on(\"connect\", () => this._onConnected());\r\n\t\tthis._client.on(\"error\", (error: Error) => this._onError(error));\r\n\t\tthis._client.on(\"drain\", () => this._onDrain());\r\n\t\tthis._client.on(\"close\", (hadError: boolean) => this._onClose(hadError));\r\n\r\n\t\t_(this._client)[\"splitBy\"](/(?=\\r\\n)/).errors((error) => this._onError(error)).each((i) => this._parseResponseGroups(i));\t// @todo: [\"splitBy] hack due to missing type\r\n\t\tthis.socketStatus = SocketState.configured;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic set autoReconnect(autoReconnect: boolean) {\r\n\t\tthis._autoReconnect = autoReconnect;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic set autoReconnectInterval(autoReconnectInterval: number) {\r\n\t\tthis._reconnectDelay = autoReconnectInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic set autoReconnectAttempts(autoReconnectAttempts: number) {\r\n\t\tthis._reconnectAttempts = autoReconnectAttempts;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic connect(): void {\r\n\t\tthis.socketStatus |= SocketState.connectionAttempt;\t// toggles triedConnection on\r\n\t\tthis.socketStatus &= ~SocketState.lostConnection;\t// toggles triedConnection on\r\n\t\tthis._client.connect(this._port, this._host);\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic disconnect(): void {\r\n\t\tif (this._client !== undefined) {\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _startReconnection(): void {\r\n\t\t// create interval if doesn't exist\r\n\t\tif (!this._reconnectInterval) {\r\n\t\t\t// @todo: create event telling reconection is in action with interval time\r\n\t\t\tthis.socketStatus |= SocketState.reconnecting;\r\n\t\t\tthis._reconnectInterval = global.setInterval(() => this._autoReconnection(), this._reconnectDelay);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _autoReconnection(): void {\r\n\t\tif (this._autoReconnect) {\r\n\t\t\tif (this._reconnectAttempts > 0) {\t\t\t\t\t\t\t\t// no reconnection if no valid reconnectionAttemps is set\r\n\t\t\t\tif ((this._reconnectAttempt >= this._reconnectAttempts)) {\t// if current attempt is not less than max attempts\r\n\t\t\t\t\t// reset reconnection behaviour\r\n\t\t\t\t\tthis._clearReconnectInterval();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t// new attempt\r\n\t\t\tthis.log(\"Socket attempting reconnection\");\r\n\t\t\tthis._reconnectAttempt++;\r\n\t\t\tthis.connect();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _clearReconnectInterval(): void {\r\n\t\t// @todo create event telling reconnection ended with result: true/false\r\n\t\t// only in reconnectio intervall is true\r\n\t\tthis._reconnectAttempt = 0;\r\n\t\tglobal.clearInterval(this._reconnectInterval);\r\n\t\tthis.socketStatus &= ~SocketState.reconnecting;\r\n\t\tdelete this._reconnectInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic get host(): string{\r\n\t\tif (this._client) {\r\n\t\t\treturn this._host;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic get port(): number{\r\n\t\tif (this._client) {\r\n\t\t\treturn this._port;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic get socketStatus(): SocketState{\r\n\t\treturn this._socketStatus;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic set socketStatus(statusMask: SocketState){\r\n\t\tif (this._socketStatus !== statusMask) {\r\n\t\t\tthis._socketStatus = statusMask;\r\n\t\t\tthis.fire(CasparCGSocketStatusEvent.STATUS, new CasparCGSocketStatusEvent(this._socketStatus));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tthis._clearReconnectInterval();\r\n\t\tthis._client.destroy();\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic log(args: any): void {\r\n\t\t// fallback, this method will be remapped to CasparCG.log by CasparCG on instantiation of socket oject\r\n\t\tconsole.log(args);\r\n\t}\r\n\r\n\t/**\r\n\t */\r\n\tset connected(connected: boolean){\r\n\t\tthis.socketStatus = connected ? this.socketStatus | SocketState.connected : this.socketStatus &= ~SocketState.connected;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic executeCommand(command: IAMCPCommand): IAMCPCommand {\r\n\t\tlet commandString: string = command.constructor[\"commandString\"] + (command.address ? \" \" + command.address : \"\");\r\n\t\tfor (let i in command.payload) {\r\n\t\t\tlet payload: Payload = command.payload[i];\r\n\t\t\tcommandString += (commandString.length > 0 ? \" \" : \"\");\r\n\t\t\tcommandString += (payload.key ? payload.key + \" \" : \"\") + payload.value;\r\n\t\t}\r\n\r\n\t\tthis._client.write(`${commandString}\\r\\n`);\r\n\t\tcommand.status = IAMCPStatus.Sent;\r\n\r\n\t\tconsole.log(commandString);\r\n\t\treturn command;\r\n\t}\r\n\r\n\t/**\r\n\t * @todo:::\r\n\t */\r\n\tprivate _onLookup() {\r\n\t\tthis.log(\"Socket event lookup\");\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _onConnected() {\r\n\t\tthis._clearReconnectInterval();\r\n\t\tthis.connected = true;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _parseResponseGroups(i: string): void {\r\n\t\ti = (i.length > 2 && i.slice(0, 2) === \"\\r\\n\") ? i.slice(2) : i;\r\n\t\tif (AMCPUtil.CasparCGSocketResponse.evaluateStatusCode(i) === 200) {\r\n\t\t\tthis._parsedResponse = new AMCPUtil.CasparCGSocketResponse(i);\r\n\t\t\treturn;\r\n\t\t} else if (this._parsedResponse && this._parsedResponse.statusCode === 200) {\r\n\t\t\tif (i !== \"\\r\\n\") {\r\n\t\t\t\tthis._parsedResponse.items.push(i);\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tthis.fire(CasparCGSocketResponseEvent.RESPONSE, new CasparCGSocketResponseEvent(this._parsedResponse));\r\n\t\t\t\tthis._parsedResponse = null;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (AMCPUtil.CasparCGSocketResponse.evaluateStatusCode(i) === 201 || AMCPUtil.CasparCGSocketResponse.evaluateStatusCode(i) === 400 || AMCPUtil.CasparCGSocketResponse.evaluateStatusCode(i) === 101) {\r\n\t\t\tthis._parsedResponse = new AMCPUtil.CasparCGSocketResponse(i);\r\n\t\t\treturn;\r\n\t\t} else if (this._parsedResponse && this._parsedResponse.statusCode === 201 || this._parsedResponse && this._parsedResponse.statusCode === 400 || this._parsedResponse && this._parsedResponse.statusCode === 101) {\r\n\t\t\tthis._parsedResponse.items.push(i);\r\n\t\t\tthis.fire(CasparCGSocketResponseEvent.RESPONSE, new CasparCGSocketResponseEvent(this._parsedResponse));\r\n\t\t\tthis._parsedResponse = null;\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tthis.fire(CasparCGSocketResponseEvent.RESPONSE, new CasparCGSocketResponseEvent(new AMCPUtil.CasparCGSocketResponse(i)));\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @todo:::\r\n\t */\r\n\tprivate _onError(error: Error) {\r\n\t\t// dispatch error!!!!!\r\n\t\tthis.log(`Socket event error: ${error.message}`);\r\n\t}\r\n\r\n\t/**\r\n\t * @todo:::\r\n\t */\r\n\tprivate _onDrain() {\r\n\t\t// @todo: implement\r\n\t\tthis.log(\"Socket event drain\");\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _onClose(hadError: boolean) {\r\n\t\tthis.connected = false;\r\n\t\tif (hadError) {\r\n\t\t\tthis.socketStatus |= SocketState.lostConnection;\r\n\t\t\t// error message, not \"log\"\r\n\t\t\t// dispatch (is it done through error handler first????)\r\n\t\t\tthis.log(`Socket close with error: ${hadError}`);\r\n\t\t\tif (this._autoReconnect) {\r\n\t\t\t\tthis._startReconnection();\r\n\t\t\t}\r\n\t\t}else {\r\n\t\t\tthis._clearReconnectInterval();\r\n\t\t}\r\n\t}\r\n} "],"sourceRoot":"/source/"}